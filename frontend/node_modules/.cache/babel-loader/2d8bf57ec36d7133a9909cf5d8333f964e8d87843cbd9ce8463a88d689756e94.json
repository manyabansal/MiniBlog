{"ast":null,"code":"require(\"dotenv\").config();\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst cors = require(\"cors\");\nconst mongoose = require(\"mongoose\");\nconst User = require(\"./models/User.js\");\nconst Post = require(\"./models/Post.js\");\nconst bcrypt = require(\"bcryptjs\");\nconst jwt = require(\"jsonwebtoken\");\nconst cookieParser = require(\"cookie-parser\");\nconst multer = require(\"multer\");\nconst upload = multer({\n  dest: \"uploads/\"\n});\nconst fs = require(\"fs\");\nconst moment = require('moment');\nconst app = express();\nconst HOST = \"http://localhost:3000\";\nconst salt = bcrypt.genSaltSync(10);\napp.use(cookieParser());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(express.static(\"public\"));\napp.use(cors({\n  credentials: true,\n  origin: HOST\n}));\napp.use(express.json());\nvar loggedIn = false;\nvar userLoggedIn = {};\nmongoose.connect(\"mongodb+srv://maanyab007:Ashok1612%40@cluster0.4fhwczw.mongodb.net/blogDB?retryWrites=true&w=majority\", {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => {\n  console.log(\"Connected to Database\");\n}).catch(err => {\n  console.log(err);\n});\napp.get(\"/\", (req, res) => {\n  res.send(\"ok\");\n});\napp.post(\"/sign-up\", (req, res) => {\n  const username = req.body.username;\n  const password = req.body.password;\n  User.find({\n    username: username\n  }).then(users => {\n    if (users.length > 0) {\n      // Username is already taken\n      return res.status(400).json({\n        message: \"Username is already taken\"\n      });\n    } else {\n      const userInfo = new User({\n        username: username,\n        password: bcrypt.hashSync(password, salt)\n      });\n      console.log(userInfo);\n      userInfo.save();\n      return res.json(userInfo);\n    }\n  }).catch(err => {\n    console.error(err);\n    return res.status(500).json({\n      message: \"Internal Server Error\"\n    });\n  });\n});\napp.post(\"/login\", function (req, res) {\n  const username = req.body.username;\n  const password = req.body.password;\n  User.findOne({\n    username\n  }).then(user => {\n    if (user) {\n      const userInfo = user;\n      const passOk = bcrypt.compareSync(password, userInfo.password);\n      if (passOk) {\n        const token = jwt.sign({\n          username,\n          id: userInfo._id\n        }, process.env.SECRET);\n        loggedIn = true;\n        userLoggedIn = user;\n        return res.cookie(`token`, token, {\n          httpOnly: true,\n          sameSite: \"none\",\n          secure: true\n        }).json({\n          id: userInfo._id,\n          username\n        });\n      } else {\n        return res.status(401).json({\n          message: \"Wrong password\"\n        });\n      }\n    } else {\n      return res.status(400).json({\n        message: \"Username doesn't exist\"\n      });\n    }\n  }).catch(err => console.log(err));\n});\napp.get(\"/profile\", (req, res) => {\n  if (loggedIn) {\n    const token = req.cookies.token;\n    if (!token) {\n      return res.status(401).json({\n        message: \"Unauthorized\"\n      });\n    }\n    const info = jwt.verify(token, process.env.SECRET);\n    res.json(info);\n  } else {\n    return res.status(401).json({\n      message: \"Unauthorized\"\n    });\n  }\n});\napp.post(\"/logout\", (req, res) => {\n  loggedIn = false;\n  res.clearCookie(`token`, {\n    httpOnly: true,\n    sameSite: \"none\",\n    secure: true,\n    expires: new Date(0),\n    path: \"/\"\n  }).json(loggedIn);\n});\napp.post(\"/post\", upload.single(\"file\"), async (req, res) => {\n  const {\n    originalname,\n    path\n  } = req.file;\n  const parts = originalname.split(\".\");\n  const ext = parts[parts.length - 1];\n  const newPath = path + \".\" + ext;\n  fs.renameSync(path, newPath);\n  const {\n    title,\n    summary,\n    content,\n    categories\n  } = req.body;\n  const postDoc = await Post.create({\n    title,\n    summary,\n    content,\n    categories,\n    date: moment().format('MMMM DD, YYYY'),\n    image: newPath,\n    author: userLoggedIn\n  });\n  res.json(postDoc);\n});\napp.get('/post', async (req, res) => {\n  const posts = await Post.find().populate('author');\n  res.json(posts);\n});\napp.listen(8000, function (req, res) {\n  console.log(\"Server is running\");\n});","map":{"version":3,"names":["require","config","express","bodyParser","cors","mongoose","User","Post","bcrypt","jwt","cookieParser","multer","upload","dest","fs","moment","app","HOST","salt","genSaltSync","use","urlencoded","extended","static","credentials","origin","json","loggedIn","userLoggedIn","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","get","req","res","send","post","username","body","password","find","users","length","status","message","userInfo","hashSync","save","error","findOne","user","passOk","compareSync","token","sign","id","_id","process","env","SECRET","cookie","httpOnly","sameSite","secure","cookies","info","verify","clearCookie","expires","Date","path","single","originalname","file","parts","split","ext","newPath","renameSync","title","summary","content","categories","postDoc","create","date","format","image","author","posts","populate","listen"],"sources":["C:/Users/maany/OneDrive/Desktop/myBlog/my-blog/rest/app.js"],"sourcesContent":["require(\"dotenv\").config();\r\nconst express = require(\"express\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst cors = require(\"cors\");\r\nconst mongoose = require(\"mongoose\");\r\nconst User = require(\"./models/User.js\");\r\nconst Post = require(\"./models/Post.js\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst cookieParser = require(\"cookie-parser\");\r\nconst multer = require(\"multer\");\r\nconst upload = multer({ dest: \"uploads/\" });\r\nconst fs = require(\"fs\");\r\nconst moment= require('moment');\r\n\r\nconst app = express();\r\nconst HOST = \"http://localhost:3000\";\r\nconst salt = bcrypt.genSaltSync(10);\r\n\r\napp.use(cookieParser());\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(express.static(\"public\"));\r\napp.use(cors({ credentials: true, origin: HOST }));\r\napp.use(express.json());\r\n\r\nvar loggedIn = false;\r\nvar userLoggedIn={};\r\n\r\nmongoose\r\n  .connect(\r\n    \"mongodb+srv://maanyab007:Ashok1612%40@cluster0.4fhwczw.mongodb.net/blogDB?retryWrites=true&w=majority\",\r\n    { useNewUrlParser: true, useUnifiedTopology: true }\r\n  )\r\n  .then(() => {\r\n    console.log(\"Connected to Database\");\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n  });\r\n\r\napp.get(\"/\", (req, res) => {\r\n  res.send(\"ok\");\r\n});\r\n\r\napp.post(\"/sign-up\", (req, res) => {\r\n  const username = req.body.username;\r\n  const password = req.body.password;\r\n\r\n  User.find({ username: username })\r\n    .then((users) => {\r\n      if (users.length > 0) {\r\n        // Username is already taken\r\n        return res.status(400).json({ message: \"Username is already taken\" });\r\n      } else {\r\n        const userInfo = new User({\r\n          username: username,\r\n          password: bcrypt.hashSync(password, salt),\r\n        });\r\n        console.log(userInfo);\r\n        userInfo.save();\r\n        return res.json(userInfo);\r\n      }\r\n    })\r\n    .catch((err) => {\r\n      console.error(err);\r\n      return res.status(500).json({ message: \"Internal Server Error\" });\r\n    });\r\n});\r\n\r\napp.post(\"/login\", function (req, res) {\r\n  const username = req.body.username;\r\n  const password = req.body.password;\r\n\r\n  User.findOne({ username })\r\n    .then((user) => {\r\n      if (user) {\r\n        const userInfo = user;\r\n        const passOk = bcrypt.compareSync(password, userInfo.password);\r\n        if (passOk) {\r\n          const token = jwt.sign(\r\n            { username, id: userInfo._id },\r\n            process.env.SECRET\r\n          );\r\n          loggedIn = true;\r\n          userLoggedIn=user;\r\n          return res\r\n            .cookie(`token`, token, {\r\n              httpOnly: true,\r\n              sameSite: \"none\",\r\n              secure: true,\r\n            })\r\n            .json({\r\n              id: userInfo._id,\r\n              username,\r\n            });\r\n        } else {\r\n          return res.status(401).json({ message: \"Wrong password\" });\r\n        }\r\n      } else {\r\n        return res.status(400).json({ message: \"Username doesn't exist\" });\r\n      }\r\n    })\r\n    .catch((err) => console.log(err));\r\n});\r\n\r\napp.get(\"/profile\", (req, res) => {\r\n  if (loggedIn) {\r\n    const token = req.cookies.token;\r\n    if (!token) {\r\n      return res.status(401).json({ message: \"Unauthorized\" });\r\n    }\r\n    const info = jwt.verify(token, process.env.SECRET);\r\n    res.json(info);\r\n  } else {\r\n    return res.status(401).json({ message: \"Unauthorized\" });\r\n  }\r\n});\r\n\r\napp.post(\"/logout\", (req, res) => {\r\n  loggedIn = false;\r\n  res\r\n    .clearCookie(`token`, {\r\n      httpOnly: true,\r\n      sameSite: \"none\",\r\n      secure: true,\r\n      expires: new Date(0),\r\n      path: \"/\",\r\n    })\r\n    .json(loggedIn);\r\n});\r\n\r\napp.post(\"/post\", upload.single(\"file\"), async (req, res) => {\r\n  \r\n  const { originalname, path } = req.file;\r\n  const parts = originalname.split(\".\");\r\n  const ext = parts[parts.length - 1];\r\n  const newPath = path + \".\" + ext;\r\n  fs.renameSync(path, newPath);\r\n\r\n  const { title, summary, content, categories} = req.body;\r\n  const postDoc = await Post.create({\r\n    title,\r\n    summary,\r\n    content,\r\n    categories,\r\n    date: moment().format('MMMM DD, YYYY'),\r\n    image: newPath,\r\n    author: userLoggedIn\r\n  });\r\n\r\n  res.json(postDoc);\r\n});\r\n\r\napp.get('/post', async (req,res)=>{\r\n  const posts= await Post.find().populate('author');\r\n  res.json(posts);\r\n});\r\n\r\napp.listen(8000, function (req, res) {\r\n  console.log(\"Server is running\");\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}